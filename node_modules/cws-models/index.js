'use strict';

var mongoose = require('mongoose');
var mongoosastic = require('mongoosastic');

var config = require('cws-config');
var logger = require('cws-logger');

var filename = 'models';

exports.setupConnection = function() {
	mongoose.connect(config.dbURI, function(err) {
		if (err) {
			logger.error(filename, 'setupConnection:' + err);
		} else {
			logger.info(filename, 'setupConnection:' + 'connected successfully to database');
		}
	});
};

exports.setupModels = function() {
	var userSchema = new mongoose.Schema({
		userId: { type: String, required: true, unique: true },
		username: { type: String },
		emailId: { type: String, required: true, unique: true }, // email
		password: { type: String, required: true },
		likes: [String],
		bookmarks: [String],
		contentsCreated: [String],
		isVerified: { type: Boolean, default: false},
		isDeleted: { type: Boolean, default: false },
		createAt: { type: Date, default: Date.now },
		updatedAt: { type: Date, default: Date.now }
	});

	var contentSchema = new mongoose.Schema({
		contentId: { type: String, required: true, unique: true },
		contentType: { type: String }, // positive, informative, concern
		category: { type: String }, // health, education
		subCategory: [String], // inspiring, 
		contentURL: { type: String, required: true, unique: true },
		ogContentURL: { type: String },
		userId: { type: String, required: true },
		ogTitle: { type: String },
		title: { type: String },
		ogDescription: { type: String },
		description: { type: String },
		ogSiteName: { type: String },
		videoURL: { type: String },
		ogImageURL: { type: String },
		imageURL: { type: String },
		localImageURL: { type: String },
		source: { type: String },
		likesCount: { type: Number, default: 0 },
		viewCount: { type: Number, default: 0 },
		isValid: { type: Boolean, default: false },
		createdAt: { type: Date, default: Date.now },
		updatedAt: { type: Date, default: Date.now }
	});

	contentSchema.index({ ogTitle: 1, ogDescription: 1 }, { unique: true });

	contentSchema.plugin(mongoosastic);

	var Content = mongoose.model('ContentModel', contentSchema);
	var User = mongoose.model('UserModel', userSchema);

	Content.createMapping(function(err, mapping) {

		if (err) {
			logger.error(filename, 'createMapping:' + err);
		} else {
			logger.info(filename, 'createMapping:' + mapping);
		}
	});
};

exports.getUserModel = function() {
	return mongoose.model('UserModel');
};

exports.getContentModel = function() {
	return mongoose.model('ContentModel');
};